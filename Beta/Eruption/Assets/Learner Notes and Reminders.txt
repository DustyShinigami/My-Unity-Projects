**Learner Notes and Reminders**

When importing scripts from other projects, such as ones for 2.5D and 3D platformers, some things need to be done before the scripts will work correctly. One such issue may
involve getting a 3D model's animations working correctly and transition from one to the other. To add existing animations made in Blender or Maya...

1. Drag and drop/import the character model with animations.
2. Create an Animator Controller.
3. Select the Animator tab.
4. Right click and select Create State > Empty.
5. Select it and change the name in the Inspector.
6. Click the dot to the right of Motion and select one the model's animations.
7. When multiple animations are present, select one, right click and select Make Transition.
8. Point the arrow to the animation you want the first to transition to.
9. Do the same from the transitioned animation to the first.
10. Parameters will need to be set, such as a float, bool, int etc. Add one by clicking on the + icon in the top right corner. These will be controlled via a script.
11. Select a transition. Usually it's best to untick Has Exit Time, click on Settings, untick Fixed Duration and keep the Duration and Offset at 0.
12. At the bottom, add a condition or two. From Idle to Jump, a bool such as isGrounded might be created, which needs to be selected and set to false. This will be the opposite
from Jump to Idle.
13. Make sure to leave Loop Time ticked in order for idle animations to reloop. Also, the reloop needs to be consistent, so this is down to how the animation is made. The times
can be edited under the Animations tab in the Inspector if the end needs to be shortened etc.

isGrounded and the animation transitions may not work once set up. The trigger box may not tick and none of the animations will show a blue bar. If this happens, try to add a
Ground Layer.

1. Create an Empty Game Object and call it GroundCheck.
2. Reset the Transform, select the Player's parent object and reset the Transform for that.
3. Place it on the Player parent object.
4. Select a platform and click the Layer drop-down list and select Add Layer...
5. Click on an empty field and call it Ground.
6. Select Ground from the Layer drop-down list.
7. In the PlayerController script, add the variables related to 'Ground'. Whether a 2D or 2.5D game, Physics2D should work.

If the isGrounded trigger box starts to work, it might be safe to delete the above steps. After doing this once before, the trigger still worked correctly. It may be a bug with Unity.

A platform the character stands on must be recognised as a ground and for isGrounded to be ticked. This will ensure the character remains in the idle state. From experimenting,
the player character needs to have a Character Controller assigned and for it to be neatly set around it. If the bottom of it goes through the platform, the player could fall
through the object. The Character Controller is a capsule shape so it'll need to be resized and repositioned accordingly. It's best to keep the bottom of it from touching the
surface of the platform.

It's recommended to create an Empty Game Object to use as the player object's parent. Once created, reset the Transform and then reset the Transform of the player model. This way,
the model will be aligned with the parent. When the parent is moved, the model will move with it. Place components on the parent object. Only the Animator will be on the model.

When using a sprite/image in a text box/prompt, such as a controller button, don't drop the image or make it a parent of the text box. Instead, create an Image via the Hierarchy > UI > Image and drop
the image into the Source Image box.

To avoid getting the error saying 'object not set to a reference of an object', make sure that you add a public variable of a GameObject type that has the component you're trying to reference in another
script. For instance, if you want to access the player's PlayerController script, make sure to create a public GameObject called player before using the GetComponent in the Start function. Alternatively,
you can supposedly avoid the GetComponent function altogether and just have the player's GameObject, drop the player object in the correct box within the Inspector, and Unity will access all of its
components.

GetComponent will only work if you're trying to access a component that's on the GameObject the script is attached to. This doesn't include GameObjects though, just components, such as scripts,
renderers etc. If you want to access a component on another GameObject, a public GameObject reference will need to be set and then dropped into the Inspector.

It doesn't look to be wise to make an Animator variable static, even if it's public, as it removes it from the Inspector and can no longer find the Animator Controller.

